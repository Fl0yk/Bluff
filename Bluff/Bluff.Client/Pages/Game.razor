@page "/game/{groupName}"
@inject IInGameHubService inGameService
@inject GameModel GameModel

<h1>@groupName</h1>

<p>
    Игроки:
</p>
<ul>
    @foreach (var client in GameModel.Clients)
    {
        <li>client - @client</li>
    }
</ul>

@if (GameModel.CurUser is null)
{
    <p>Введите имя пользователя:</p>
    <br />
    <input id="userName" type="text" required @bind-value="usernameInput" />
    <br />
    <br />

    <div>
        <input type="button" id="sendBtn" value="Подключиться к игре" @onclick="(() =>{ ConnectToServerRequest().Wait();})" />
    </div>
}
else if (readyUsers != GameModel.Clients.Count)
{
    <div>
        <input type="button" id="sendBtn" value="Готов" @onclick="(async () => await UserReadyRequest())" disabled="@(!isDisplay)" />
    </div>
    <p>Готово пользователей @readyUsers</p>
}
else
{
    @if (GameModel.State == GameState.Bet)
    {
        <div>
            Введите вашу ставку:
        </div>
    }
    else
    {
        <div>
            Ожидайте, пока пользователь введет ставку
        </div>
    }

    <GameBoard />
}

@code {
    // захардкоженная группа
    [Parameter]
    public string groupName { get; set; }

    // отображение кнопки готов
    private bool isDisplay = false;
    private string? usernameInput;
    private int readyUsers = 0;

    protected async override Task OnInitializedAsync()
    {
        GameModel.GameName = groupName;
        //Console.WriteLine("Init");
        // запрос готовности у всех пользователей
        inGameService.CreateConnection("HandleUserReadyCheck", (Client client) =>
        {
            // добавляем подключенного пользователя
            //this.clients.Add(client);
            GameModel.Clients.Add(client.Name);
            Console.WriteLine("Handle user ready check");
            //осуществляем запрос готовности, путем отображения кнопки
            isDisplay = true;

            this.StateHasChanged();
        });

        // обработка подключенного пользователя
        inGameService.CreateConnection("HandleUserConnected", (Client client) =>
        {
            // просто добавляем подключенного пользователя
            GameModel.Clients.Add(client.Name);
            Console.WriteLine("Handle user connected");
            this.StateHasChanged();
        }); 

        // обработка начала игры
        inGameService.CreateConnection("HandleGameStart", (Client client) =>
        {
            // увеличиваем количество готовых пользователей(хаб вернул клиента,
            // нажавшего готов, поэтому надо это обработать)
            readyUsers++;

            // определяем того, кто делает ставку
            GameModel.Start(client.Name);

            this.StateHasChanged();
        });

        // обработка готовности игрока
        inGameService.CreateConnection("HandleUserReady", (int userReadyAmount) =>
        {
            // устанавливаем количество готовых пользователей
            readyUsers = userReadyAmount;

            this.StateHasChanged();
        });

        // получение всех клиентов от сервера 
        // (нужно когда пользователь только подключается к игре)
        inGameService.CreateConnection("HandleGetAllClients", (List<Client> respClients) =>
        {
            //clients = respClients;
            GameModel.Clients = respClients.Select(c => c.Name).ToList();

            this.StateHasChanged();
        });


        await inGameService.ConnectToHub();

        // получаем всех пользователей
        await inGameService.GetClientsRequest(groupName);
    }

    // подключение к хабу
    public async Task ConnectToServerRequest()
    {
        if (string.IsNullOrEmpty(usernameInput))
            return;
        GameModel.CurUser = usernameInput;

        await inGameService.ConnectToServerRequest(GameModel.CurUser!, groupName!);

        GameModel.CurUser = usernameInput;

        this.StateHasChanged();
    }

    // обработка нажатия кнопки готов
    public async Task UserReadyRequest()
    {
        // отправка запроса к хабу
        await inGameService.UserReadyRequest(groupName!);

        // перестаем отображать кнопку готов
        isDisplay = false;
        this.StateHasChanged();
    }

}
