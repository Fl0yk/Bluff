@inject IInGameHubService InGameService
@inject GameModel GameModel

@if (GameModel.State == GameState.Bet && cubeSelected)
{
    <div class="container">
        @foreach (var cell in GameModel.GameBoard.AvailableCells(minSelectCount, selectedIsStar))
        {
            <div class="item @((cell.IsAvailable && cell.IsStar == selectedIsStar) ? "available" : "")"
                 style="grid-column: @(cell.Position.column + 1)/ @(cell.Position.column + 2);
                                    grid-row: @(cell.Position.row + 1)/ @(cell.Position.row + 2);"
                 @onclick="() => SelectCount(cell.Id)">

                @cell.Value
                @if (cell.IsStar)
                {
                    <p>*</p>
                }
            </div>
        }
        <div class="center">
            @cube
        </div>
    </div>
}
else
{
    <div class="container">
        @foreach (var cell in GameModel.GameBoard.Cells)
        {
            <div class="item" style="grid-column: @(cell.Position.column + 1)/ @(cell.Position.column + 2);
                                grid-row: @(cell.Position.row + 1)/ @(cell.Position.row + 2);">
                @if(count == cell.Id)
                {
                    <p>Тут @cube)</p>
                }
                else
                {
                    @cell.Value
                    @if (cell.IsStar)
                    {
                        <p>*</p>
                    }
                }
            </div>
        }
        <div class="center">
            @if (GameModel.State == GameState.Bet)
            {
                @for (int i = 1; i < 6; i++)
                {
                    int ind = i - 1;
                    <div class="cube" @onclick="() => SelectCube(ind)">
                        @i
                    </div>
                }
                <div class="cube" @onclick="() => SelectCube(5)">
                    *
                </div>
                <br />
            }
            else if(GameModel.State == GameState.EndGame)
            {
                <p>Победил @GameModel?.WinnerName</p>
            }
            else
            {
                @GameModel.CountOfCubes
            }
        </div>
    </div>
}


@code {
    private int count;
    private int cube;
    private bool selectedIsStar;
    private int minSelectCount;

    private bool cubeSelected = false;

    public void PlaceBet()
    {
        if(InGameService.PlaceABetRequest(GameModel.GameName, GameModel.CurUser!, cube, count).Result)
        {
            Console.WriteLine("Good");
        }
        else
        {
            Console.WriteLine("Bad");
            Console.WriteLine(InGameService.ErrorMessage);
        }
        Console.WriteLine("After count a bet");
    }

    protected async override Task OnInitializedAsync()
    {
        GameModel.UpdatePage += this.StateHasChanged;
        //Подписка на получение ставки
        InGameService.CreateConnection("GetNewBet", (Bet newBet, string nextUser) =>
        {
            GameModel.GetNewBet(newBet, nextUser);
            count = newBet.Count;
            cube = newBet.CubeValue;

            this.StateHasChanged();
        });

        await InGameService.ConnectToHub();
    }

    public void SelectCube(int cubeValue)
    {
        //Если выбрали больше, чем было, то можно выбрать ту же ячейку
        minSelectCount = (cubeValue > cube) ? count : count + 1;
        
        cube = cubeValue;
        cubeSelected = true;
        selectedIsStar = cube == 5;
    }

    public void SelectCount(int cellId)
    {
        if (cellId < minSelectCount)
            return;

        count = cellId;
        PlaceBet();
        cubeSelected = false;
    }
}
